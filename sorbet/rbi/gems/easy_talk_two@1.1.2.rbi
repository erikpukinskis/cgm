# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `easy_talk_two` gem.
# Please instead update this file by running `bin/tapioca gem easy_talk_two`.


# The EasyTalk module is the main namespace for the gem.
#
# source://easy_talk_two//lib/easy_talk.rb#4
module EasyTalk
  class << self
    # source://easy_talk_two//lib/easy_talk.rb#17
    def assert_valid_property_options(property_name, options, *valid_keys); end

    # source://easy_talk_two//lib/easy_talk/configuration.rb#21
    def configuration; end

    # @yield [configuration]
    #
    # source://easy_talk_two//lib/easy_talk/configuration.rb#25
    def configure; end

    # source://easy_talk_two//lib/easy_talk.rb#26
    def configure_nilable_behavior(nilable_is_optional = T.unsafe(nil)); end
  end
end

# This class is responsible for building a SchemaDefinition from an ActiveRecord model
# It analyzes the database schema and creates a SchemaDefinition that can be
# passed to ObjectBuilder for final schema generation
#
# source://easy_talk_two//lib/easy_talk/active_record_schema_builder.rb#7
class EasyTalk::ActiveRecordSchemaBuilder
  # Initialize the builder with an ActiveRecord model
  #
  # @param model [Class] An ActiveRecord model class
  # @raise [ArgumentError] If the provided class is not an ActiveRecord model
  # @return [ActiveRecordSchemaBuilder] a new instance of ActiveRecordSchemaBuilder
  #
  # source://easy_talk_two//lib/easy_talk/active_record_schema_builder.rb#39
  def initialize(model); end

  # Build a SchemaDefinition object from the ActiveRecord model
  #
  # @return [EasyTalk::SchemaDefinition] A schema definition built from the database structure
  #
  # source://easy_talk_two//lib/easy_talk/active_record_schema_builder.rb#48
  def build_schema_definition; end

  # Returns the value of attribute model.
  #
  # source://easy_talk_two//lib/easy_talk/active_record_schema_builder.rb#33
  def model; end

  private

  # Add properties based on ActiveRecord associations
  #
  # @param schema_def [EasyTalk::SchemaDefinition] The schema definition to modify
  #
  # source://easy_talk_two//lib/easy_talk/active_record_schema_builder.rb#153
  def add_association_properties(schema_def); end

  # Add properties based on database columns
  #
  # @param schema_def [EasyTalk::SchemaDefinition] The schema definition to modify
  #
  # source://easy_talk_two//lib/easy_talk/active_record_schema_builder.rb#93
  def add_column_properties(schema_def); end

  # Add virtual properties defined in schema_enhancements
  #
  # @param schema_def [EasyTalk::SchemaDefinition] The schema definition to modify
  #
  # source://easy_talk_two//lib/easy_talk/active_record_schema_builder.rb#181
  def add_virtual_properties(schema_def); end

  # Set top-level schema metadata like title, description, and additionalProperties
  #
  # @param schema_def [EasyTalk::SchemaDefinition] The schema definition to modify
  #
  # source://easy_talk_two//lib/easy_talk/active_record_schema_builder.rb#71
  def apply_schema_metadata(schema_def); end

  # Check if an association should be excluded
  #
  # @param association [ActiveRecord::Reflection::AssociationReflection] The association
  # @return [Boolean] True if the association should be excluded
  #
  # source://easy_talk_two//lib/easy_talk/active_record_schema_builder.rb#259
  def association_excluded?(association); end

  # Build constraints hash for a database column
  #
  # @param column [ActiveRecord::ConnectionAdapters::Column] The database column
  # @param enhancements [Hash] Any schema enhancements for this column
  # @return [Hash] The constraints hash
  #
  # source://easy_talk_two//lib/easy_talk/active_record_schema_builder.rb#117
  def build_column_constraints(column, enhancements); end

  # Get all excluded associations
  #
  # @return [Array<Symbol>] Excluded association names
  #
  # source://easy_talk_two//lib/easy_talk/active_record_schema_builder.rb#293
  def excluded_associations; end

  # Get all excluded columns
  #
  # @return [Array<Symbol>] Excluded column names
  #
  # source://easy_talk_two//lib/easy_talk/active_record_schema_builder.rb#279
  def excluded_columns; end

  # Get all columns that should be included in the schema
  #
  # @return [Array<ActiveRecord::ConnectionAdapters::Column>] Filtered columns
  #
  # source://easy_talk_two//lib/easy_talk/active_record_schema_builder.rb#229
  def filtered_columns; end

  # Check if a column is a foreign key column
  #
  # @param column_name [String] The column name
  # @return [Boolean] True if the column is a foreign key column
  #
  # source://easy_talk_two//lib/easy_talk/active_record_schema_builder.rb#251
  def foreign_key_column?(column_name); end

  # Map a type string to a Ruby class
  #
  # @param type_str [String] The type string (e.g., 'string', 'integer')
  # @return [Class] The corresponding Ruby class
  #
  # source://easy_talk_two//lib/easy_talk/active_record_schema_builder.rb#211
  def map_type_string_to_ruby_class(type_str); end

  # Get schema enhancements
  #
  # @return [Hash] Schema enhancements
  #
  # source://easy_talk_two//lib/easy_talk/active_record_schema_builder.rb#268
  def schema_enhancements; end

  # Check if a column is a timestamp column
  #
  # @param column_name [String] The column name
  # @return [Boolean] True if the column is a timestamp column
  #
  # source://easy_talk_two//lib/easy_talk/active_record_schema_builder.rb#243
  def timestamp_column?(column_name); end
end

# Mapping of ActiveRecord column types to Ruby classes
#
# source://easy_talk_two//lib/easy_talk/active_record_schema_builder.rb#9
EasyTalk::ActiveRecordSchemaBuilder::COLUMN_TYPE_MAP = T.let(T.unsafe(nil), Hash)

# Mapping for format constraints based on column type
#
# source://easy_talk_two//lib/easy_talk/active_record_schema_builder.rb#26
EasyTalk::ActiveRecordSchemaBuilder::FORMAT_MAP = T.let(T.unsafe(nil), Hash)

# source://easy_talk_two//lib/easy_talk/builders/base_builder.rb#5
module EasyTalk::Builders; end

# BaseBuilder is a class that provides a common structure for building schema properties
#
# source://easy_talk_two//lib/easy_talk/builders/base_builder.rb#7
class EasyTalk::Builders::BaseBuilder
  # source://easy_talk_two//lib/easy_talk/builders/base_builder.rb#34
  sig do
    params(
      property_name: ::Symbol,
      schema: T::Hash[::Symbol, T.untyped],
      options: T::Hash[::Symbol, ::String],
      valid_options: T::Hash[::Symbol, T.untyped]
    ).void
  end
  def initialize(property_name, schema, options = T.unsafe(nil), valid_options = T.unsafe(nil)); end

  # Builds the schema object based on the provided options.
  #
  # source://easy_talk_two//lib/easy_talk/builders/base_builder.rb#44
  sig { returns(T::Hash[::Symbol, T.untyped]) }
  def build; end

  # Returns the value of attribute options.
  #
  # source://easy_talk_two//lib/easy_talk/builders/base_builder.rb#18
  def options; end

  # Returns the value of attribute property_name.
  #
  # source://easy_talk_two//lib/easy_talk/builders/base_builder.rb#18
  def property_name; end

  # Returns the value of attribute schema.
  #
  # source://easy_talk_two//lib/easy_talk/builders/base_builder.rb#18
  def schema; end

  class << self
    # @return [Boolean]
    #
    # source://easy_talk_two//lib/easy_talk/builders/base_builder.rb#60
    def collection_type?; end
  end
end

# BaseBuilder is a class that provides a common structure for building objects
# representing schema properties.
#
# source://easy_talk_two//lib/easy_talk/builders/base_builder.rb#12
EasyTalk::Builders::BaseBuilder::COMMON_OPTIONS = T.let(T.unsafe(nil), Hash)

# Builder class for boolean properties.
#
# source://easy_talk_two//lib/easy_talk/builders/boolean_builder.rb#8
class EasyTalk::Builders::BooleanBuilder < ::EasyTalk::Builders::BaseBuilder
  # source://easy_talk_two//lib/easy_talk/builders/boolean_builder.rb#18
  sig { params(name: ::Symbol, constraints: T::Hash[T.untyped, T.untyped]).void }
  def initialize(name, constraints = T.unsafe(nil)); end
end

# VALID_OPTIONS defines the valid options for a boolean property.
#
# source://easy_talk_two//lib/easy_talk/builders/boolean_builder.rb#12
EasyTalk::Builders::BooleanBuilder::VALID_OPTIONS = T.let(T.unsafe(nil), Hash)

# Base builder class for array-type properties.
#
# source://easy_talk_two//lib/easy_talk/builders/collection_helpers.rb#6
module EasyTalk::Builders::CollectionHelpers
  # @return [Boolean]
  #
  # source://easy_talk_two//lib/easy_talk/builders/collection_helpers.rb#7
  def collection_type?; end
end

# This class represents a builder for composing JSON schemas using the "allOf", "anyOf", or "oneOf" keywords.
#
# source://easy_talk_two//lib/easy_talk/builders/composition_builder.rb#8
class EasyTalk::Builders::CompositionBuilder
  extend ::EasyTalk::Builders::CollectionHelpers

  # source://easy_talk_two//lib/easy_talk/builders/composition_builder.rb#24
  sig { params(name: ::Symbol, type: T.untyped, _constraints: T::Hash[T.untyped, T.untyped]).void }
  def initialize(name, type, _constraints); end

  # Builds the composed JSON schema.
  #
  # @return [void]
  #
  # source://easy_talk_two//lib/easy_talk/builders/composition_builder.rb#34
  def build; end

  # Returns the composer keyword based on the composer type.
  #
  # @return [String] The composer keyword.
  #
  # source://easy_talk_two//lib/easy_talk/builders/composition_builder.rb#44
  def composer_keyword; end

  # Returns the items of the type.
  #
  # @return [T.untyped] The items of the type.
  #
  # source://easy_talk_two//lib/easy_talk/builders/composition_builder.rb#60
  def items; end

  # Returns an array of schemas for the composed JSON schema.
  #
  # @return [Array<Hash>] The array of schemas.
  #
  # source://easy_talk_two//lib/easy_talk/builders/composition_builder.rb#51
  def schemas; end
end

# Builder class for AllOf composition.
#
# source://easy_talk_two//lib/easy_talk/builders/composition_builder.rb#65
class EasyTalk::Builders::CompositionBuilder::AllOfBuilder < ::EasyTalk::Builders::CompositionBuilder; end

# Builder class for AnyOf composition.
#
# source://easy_talk_two//lib/easy_talk/builders/composition_builder.rb#69
class EasyTalk::Builders::CompositionBuilder::AnyOfBuilder < ::EasyTalk::Builders::CompositionBuilder; end

# source://easy_talk_two//lib/easy_talk/builders/composition_builder.rb#12
EasyTalk::Builders::CompositionBuilder::COMPOSER_TO_KEYWORD = T.let(T.unsafe(nil), Hash)

# Builder class for OneOf composition.
#
# source://easy_talk_two//lib/easy_talk/builders/composition_builder.rb#73
class EasyTalk::Builders::CompositionBuilder::OneOfBuilder < ::EasyTalk::Builders::CompositionBuilder; end

# Builder class for integer properties.
#
# source://easy_talk_two//lib/easy_talk/builders/integer_builder.rb#8
class EasyTalk::Builders::IntegerBuilder < ::EasyTalk::Builders::BaseBuilder
  # Initializes a new instance of the IntegerBuilder class.
  #
  # source://easy_talk_two//lib/easy_talk/builders/integer_builder.rb#23
  sig { params(name: ::Symbol, constraints: T::Hash[T.untyped, T.untyped]).void }
  def initialize(name, constraints = T.unsafe(nil)); end
end

# source://easy_talk_two//lib/easy_talk/builders/integer_builder.rb#10
EasyTalk::Builders::IntegerBuilder::VALID_OPTIONS = T.let(T.unsafe(nil), Hash)

# builder class for Null properties.
#
# source://easy_talk_two//lib/easy_talk/builders/null_builder.rb#8
class EasyTalk::Builders::NullBuilder < ::EasyTalk::Builders::BaseBuilder
  # Initializes a new instance of the NullBuilder class.
  #
  # source://easy_talk_two//lib/easy_talk/builders/null_builder.rb#11
  sig { params(name: ::Symbol, _constraints: T::Hash[T.untyped, T.untyped]).void }
  def initialize(name, _constraints = T.unsafe(nil)); end
end

# Builder class for number properties.
#
# source://easy_talk_two//lib/easy_talk/builders/number_builder.rb#8
class EasyTalk::Builders::NumberBuilder < ::EasyTalk::Builders::BaseBuilder
  # Initializes a new instance of the NumberBuilder class.
  #
  # source://easy_talk_two//lib/easy_talk/builders/number_builder.rb#22
  sig { params(name: ::Symbol, constraints: T::Hash[T.untyped, T.untyped]).void }
  def initialize(name, constraints = T.unsafe(nil)); end
end

# source://easy_talk_two//lib/easy_talk/builders/number_builder.rb#9
EasyTalk::Builders::NumberBuilder::VALID_OPTIONS = T.let(T.unsafe(nil), Hash)

# ObjectBuilder is responsible for turning a SchemaDefinition of an "object" type
# into a validated JSON Schema hash. It:
#
# 1) Recursively processes the schema's :properties,
# 2) Determines which properties are required (unless optional),
# 3) Handles sub-schema composition (allOf, anyOf, oneOf, not),
# 4) Produces the final object-level schema hash.
#
# source://easy_talk_two//lib/easy_talk/builders/object_builder.rb#16
class EasyTalk::Builders::ObjectBuilder < ::EasyTalk::Builders::BaseBuilder
  # source://easy_talk_two//lib/easy_talk/builders/object_builder.rb#33
  sig { params(schema_definition: ::EasyTalk::SchemaDefinition).void }
  def initialize(schema_definition); end

  private

  # For each item in the composer, add it to :defs so that we can reference it later.
  #
  # source://easy_talk_two//lib/easy_talk/builders/object_builder.rb#160
  def add_defs_from_subschema(schema_hash, subschema); end

  # Add references to the schema for each sub-item in the composer
  # e.g. { "$ref": "#/$defs/SomeClass" }
  #
  # source://easy_talk_two//lib/easy_talk/builders/object_builder.rb#174
  def add_refs_from_subschema(schema_hash, subschema); end

  # Main aggregator: merges the top-level schema keys (like :properties, :subschemas)
  # into a single hash that we'll feed to BaseBuilder.
  #
  # source://easy_talk_two//lib/easy_talk/builders/object_builder.rb#59
  def build_options_hash; end

  # Given the property definitions hash, produce a new hash of
  # { property_name => [Property or nested schema builder result] }.
  #
  # source://easy_talk_two//lib/easy_talk/builders/object_builder.rb#85
  def build_properties(properties_hash); end

  # Builds a single property. Could be a nested schema if it has sub-properties,
  # or a standard scalar property (String, Integer, etc.).
  #
  # source://easy_talk_two//lib/easy_talk/builders/object_builder.rb#133
  def build_property(prop_name, prop_options); end

  # Decide if a property should be required. If it's optional or nilable,
  # we won't include it in the "required" array.
  #
  # source://easy_talk_two//lib/easy_talk/builders/object_builder.rb#108
  def mark_required_unless_optional(prop_name, prop_options); end

  # Process top-level composition keywords (e.g. allOf, anyOf, oneOf),
  # converting them to definitions + references if appropriate.
  #
  # source://easy_talk_two//lib/easy_talk/builders/object_builder.rb#149
  def process_subschemas(schema_hash); end

  # Returns true if the property is declared optional.
  #
  # @return [Boolean]
  #
  # source://easy_talk_two//lib/easy_talk/builders/object_builder.rb#117
  def property_optional?(prop_options); end
end

# Required by BaseBuilder: recognized schema options for "object" types
#
# source://easy_talk_two//lib/easy_talk/builders/object_builder.rb#20
EasyTalk::Builders::ObjectBuilder::VALID_OPTIONS = T.let(T.unsafe(nil), Hash)

# Builder class for string properties.
#
# source://easy_talk_two//lib/easy_talk/builders/string_builder.rb#9
class EasyTalk::Builders::StringBuilder < ::EasyTalk::Builders::BaseBuilder
  # source://easy_talk_two//lib/easy_talk/builders/string_builder.rb#22
  sig { params(name: ::Symbol, constraints: T::Hash[T.untyped, T.untyped]).void }
  def initialize(name, constraints = T.unsafe(nil)); end
end

# source://easy_talk_two//lib/easy_talk/builders/string_builder.rb#11
EasyTalk::Builders::StringBuilder::VALID_OPTIONS = T.let(T.unsafe(nil), Hash)

# Builder class for temporal properties (date, datetime, time).
#
# source://easy_talk_two//lib/easy_talk/builders/temporal_builder.rb#8
class EasyTalk::Builders::TemporalBuilder < ::EasyTalk::Builders::StringBuilder
  # Initializes a new instance of the TemporalBuilder class.
  #
  # @param property_name [Symbol] The name of the property.
  # @param options [Hash] The options for the builder.
  # @param format [String] The format of the temporal property (date, date-time, time).
  # @return [TemporalBuilder] a new instance of TemporalBuilder
  #
  # source://easy_talk_two//lib/easy_talk/builders/temporal_builder.rb#14
  def initialize(property_name, options = T.unsafe(nil), format = T.unsafe(nil)); end

  # Modifies the schema to include the format constraint for a temporal property.
  #
  # source://easy_talk_two//lib/easy_talk/builders/temporal_builder.rb#21
  sig { returns(T::Hash[::Symbol, T.untyped]) }
  def schema; end
end

# Builder class for date properties.
#
# source://easy_talk_two//lib/easy_talk/builders/temporal_builder.rb#28
class EasyTalk::Builders::TemporalBuilder::DateBuilder < ::EasyTalk::Builders::TemporalBuilder
  # @return [DateBuilder] a new instance of DateBuilder
  #
  # source://easy_talk_two//lib/easy_talk/builders/temporal_builder.rb#29
  def initialize(property_name, options = T.unsafe(nil)); end
end

# Builder class for datetime properties.
#
# source://easy_talk_two//lib/easy_talk/builders/temporal_builder.rb#35
class EasyTalk::Builders::TemporalBuilder::DatetimeBuilder < ::EasyTalk::Builders::TemporalBuilder
  # @return [DatetimeBuilder] a new instance of DatetimeBuilder
  #
  # source://easy_talk_two//lib/easy_talk/builders/temporal_builder.rb#36
  def initialize(property_name, options = T.unsafe(nil)); end
end

# Builder class for time properties.
#
# source://easy_talk_two//lib/easy_talk/builders/temporal_builder.rb#42
class EasyTalk::Builders::TemporalBuilder::TimeBuilder < ::EasyTalk::Builders::TemporalBuilder
  # @return [TimeBuilder] a new instance of TimeBuilder
  #
  # source://easy_talk_two//lib/easy_talk/builders/temporal_builder.rb#43
  def initialize(property_name, options = T.unsafe(nil)); end
end

# Builder class for array properties.
#
# source://easy_talk_two//lib/easy_talk/builders/typed_array_builder.rb#8
class EasyTalk::Builders::TypedArrayBuilder < ::EasyTalk::Builders::BaseBuilder
  extend ::EasyTalk::Builders::CollectionHelpers

  # source://easy_talk_two//lib/easy_talk/builders/typed_array_builder.rb#23
  sig { params(name: ::Symbol, type: T.untyped, constraints: T::Hash[T.untyped, T.untyped]).void }
  def initialize(name, type, constraints = T.unsafe(nil)); end

  # Returns the value of attribute type.
  #
  # source://easy_talk_two//lib/easy_talk/builders/typed_array_builder.rb#20
  def type; end

  private

  # source://easy_talk_two//lib/easy_talk/builders/typed_array_builder.rb#42
  def inner_type; end

  # Modifies the schema to include the `items` property.
  #
  # source://easy_talk_two//lib/easy_talk/builders/typed_array_builder.rb#36
  sig { returns(T::Hash[::Symbol, T.untyped]) }
  def schema; end

  # source://easy_talk_two//lib/easy_talk/builders/typed_array_builder.rb#50
  sig { void }
  def update_option_types; end
end

# source://easy_talk_two//lib/easy_talk/builders/typed_array_builder.rb#12
EasyTalk::Builders::TypedArrayBuilder::VALID_OPTIONS = T.let(T.unsafe(nil), Hash)

# Base builder class for array-type properties.
#
# source://easy_talk_two//lib/easy_talk/builders/union_builder.rb#8
class EasyTalk::Builders::UnionBuilder
  extend ::EasyTalk::Builders::CollectionHelpers

  # source://easy_talk_two//lib/easy_talk/builders/union_builder.rb#13
  sig { params(name: ::Symbol, type: T.untyped, constraints: T.untyped).void }
  def initialize(name, type, constraints); end

  # source://easy_talk_two//lib/easy_talk/builders/union_builder.rb#20
  def build; end

  # source://easy_talk_two//lib/easy_talk/builders/union_builder.rb#26
  def schemas; end

  # source://easy_talk_two//lib/easy_talk/builders/union_builder.rb#32
  def types; end
end

# source://easy_talk_two//lib/easy_talk/configuration.rb#4
class EasyTalk::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://easy_talk_two//lib/easy_talk/configuration.rb#9
  def initialize; end

  # Returns the value of attribute default_additional_properties.
  #
  # source://easy_talk_two//lib/easy_talk/configuration.rb#5
  def default_additional_properties; end

  # Sets the attribute default_additional_properties
  #
  # @param value the value to set the attribute default_additional_properties to.
  #
  # source://easy_talk_two//lib/easy_talk/configuration.rb#5
  def default_additional_properties=(_arg0); end

  # Returns the value of attribute exclude_associations.
  #
  # source://easy_talk_two//lib/easy_talk/configuration.rb#5
  def exclude_associations; end

  # Sets the attribute exclude_associations
  #
  # @param value the value to set the attribute exclude_associations to.
  #
  # source://easy_talk_two//lib/easy_talk/configuration.rb#5
  def exclude_associations=(_arg0); end

  # Returns the value of attribute exclude_foreign_keys.
  #
  # source://easy_talk_two//lib/easy_talk/configuration.rb#5
  def exclude_foreign_keys; end

  # Sets the attribute exclude_foreign_keys
  #
  # @param value the value to set the attribute exclude_foreign_keys to.
  #
  # source://easy_talk_two//lib/easy_talk/configuration.rb#5
  def exclude_foreign_keys=(_arg0); end

  # Returns the value of attribute exclude_primary_key.
  #
  # source://easy_talk_two//lib/easy_talk/configuration.rb#5
  def exclude_primary_key; end

  # Sets the attribute exclude_primary_key
  #
  # @param value the value to set the attribute exclude_primary_key to.
  #
  # source://easy_talk_two//lib/easy_talk/configuration.rb#5
  def exclude_primary_key=(_arg0); end

  # Returns the value of attribute exclude_timestamps.
  #
  # source://easy_talk_two//lib/easy_talk/configuration.rb#5
  def exclude_timestamps; end

  # Sets the attribute exclude_timestamps
  #
  # @param value the value to set the attribute exclude_timestamps to.
  #
  # source://easy_talk_two//lib/easy_talk/configuration.rb#5
  def exclude_timestamps=(_arg0); end

  # Returns the value of attribute excluded_columns.
  #
  # source://easy_talk_two//lib/easy_talk/configuration.rb#5
  def excluded_columns; end

  # Sets the attribute excluded_columns
  #
  # @param value the value to set the attribute excluded_columns to.
  #
  # source://easy_talk_two//lib/easy_talk/configuration.rb#5
  def excluded_columns=(_arg0); end

  # Returns the value of attribute nilable_is_optional.
  #
  # source://easy_talk_two//lib/easy_talk/configuration.rb#5
  def nilable_is_optional; end

  # Sets the attribute nilable_is_optional
  #
  # @param value the value to set the attribute nilable_is_optional to.
  #
  # source://easy_talk_two//lib/easy_talk/configuration.rb#5
  def nilable_is_optional=(_arg0); end
end

# source://easy_talk_two//lib/easy_talk/errors.rb#5
class EasyTalk::ConstraintError < ::EasyTalk::Error; end

# source://easy_talk_two//lib/easy_talk/errors.rb#4
class EasyTalk::Error < ::StandardError; end

# source://easy_talk_two//lib/easy_talk/errors_helper.rb#4
module EasyTalk::ErrorHelper
  class << self
    # source://easy_talk_two//lib/easy_talk/errors_helper.rb#24
    def extract_inner_type(type_info); end

    # @raise [ConstraintError]
    #
    # source://easy_talk_two//lib/easy_talk/errors_helper.rb#11
    def raise_array_constraint_error(property_name:, constraint_name:, index:, expected:, got:); end

    # @raise [ConstraintError]
    #
    # source://easy_talk_two//lib/easy_talk/errors_helper.rb#5
    def raise_constraint_error(property_name:, constraint_name:, expected:, got:); end

    # @raise [UnknownOptionError]
    #
    # source://easy_talk_two//lib/easy_talk/errors_helper.rb#17
    def raise_unknown_option_error(property_name:, option:, valid_options:); end

    # source://easy_talk_two//lib/easy_talk/errors_helper.rb#83
    def validate_constraint_value(property_name:, constraint_name:, value_type:, value:); end

    # source://easy_talk_two//lib/easy_talk/errors_helper.rb#45
    def validate_typed_array_values(property_name:, constraint_name:, type_info:, array_value:); end
  end
end

# source://easy_talk_two//lib/easy_talk/errors.rb#7
class EasyTalk::InvalidPropertyNameError < ::EasyTalk::Error; end

# source://easy_talk_two//lib/easy_talk/keywords.rb#4
EasyTalk::KEYWORDS = T.let(T.unsafe(nil), Array)

# The `Model` module is a mixin that provides functionality for defining and accessing the schema of a model.
#
# It includes methods for defining the schema, retrieving the schema definition,
# and generating the JSON schema for the model.
#
# Example usage:
#
#   class Person
#     include EasyTalk::Model
#
#     define_schema do
#       property :name, String, description: 'The person\'s name'
#       property :age, Integer, description: 'The person\'s age'
#     end
#   end
#
#   Person.json_schema #=> returns the JSON schema for Person
#   jim = Person.new(name: 'Jim', age: 30)
#   jim.valid? #=> returns true
#
# @see SchemaDefinition
#
# source://easy_talk_two//lib/easy_talk/model.rb#36
module EasyTalk::Model
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  include ::ActiveModel::Validations
  include ::ActiveModel::Conversion
  include ::ActiveModel::API
  include ::EasyTalk::Model::InstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::Validations::ClassMethods
  mixes_in_class_methods ::ActiveModel::Callbacks
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::ActiveModel::Translation
  mixes_in_class_methods ::ActiveModel::Validations::HelperMethods
  mixes_in_class_methods ::ActiveModel::Conversion::ClassMethods
  mixes_in_class_methods ::EasyTalk::Model::ClassMethods

  class << self
    # @private
    #
    # source://easy_talk_two//lib/easy_talk/model.rb#37
    def included(base); end
  end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def _validators; end
    def _validators=(value); end
    def _validators?; end
    def param_delimiter; end
    def param_delimiter=(value); end
    def param_delimiter?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def _validators; end
    def _validators?; end
    def param_delimiter=(value); end
  end
end

# Module containing ActiveRecord-specific methods for schema generation
#
# source://easy_talk_two//lib/easy_talk/model.rb#169
module EasyTalk::Model::ActiveRecordClassMethods
  # Gets a SchemaDefinition that's built from the ActiveRecord database schema
  #
  # @return [SchemaDefinition] A schema definition built from the database
  #
  # source://easy_talk_two//lib/easy_talk/model.rb#173
  def active_record_schema_definition; end

  # Enhance the generated schema with additional information
  #
  # @param enhancements [Hash] The schema enhancements
  # @return [void]
  #
  # source://easy_talk_two//lib/easy_talk/model.rb#188
  def enhance_schema(enhancements); end

  # Store enhancements to be applied to the schema
  #
  # @return [Hash] The schema enhancements
  #
  # source://easy_talk_two//lib/easy_talk/model.rb#180
  def schema_enhancements; end
end

# Module containing class-level methods for defining and accessing the schema of a model.
#
# source://easy_talk_two//lib/easy_talk/model.rb#94
module EasyTalk::Model::ClassMethods
  # @return [Boolean]
  #
  # source://easy_talk_two//lib/easy_talk/model.rb#154
  def additional_properties_allowed?; end

  # Builds the schema using the provided schema definition.
  # This is the convergence point for all schema generation.
  #
  # @param schema_definition [SchemaDefinition] The schema definition.
  # @return [Schema] The validated schema.
  #
  # source://easy_talk_two//lib/easy_talk/model.rb#163
  def build_schema(schema_definition); end

  # Define the schema for the model using the provided block.
  #
  # @raise [ArgumentError] If the class does not have a name.
  # @yield The block to define the schema.
  #
  # source://easy_talk_two//lib/easy_talk/model.rb#137
  def define_schema(&block); end

  # Returns the JSON schema for the model.
  #
  # @return [Hash] The JSON schema for the model.
  #
  # source://easy_talk_two//lib/easy_talk/model.rb#129
  def json_schema; end

  # source://easy_talk_two//lib/easy_talk/model.rb#118
  def properties; end

  # Returns the reference template for the model.
  #
  # @return [String] The reference template for the model.
  #
  # source://easy_talk_two//lib/easy_talk/model.rb#114
  def ref_template; end

  # Returns the schema for the model.
  #
  # @return [Schema] The schema for the model.
  #
  # source://easy_talk_two//lib/easy_talk/model.rb#98
  def schema; end

  # Returns the unvalidated schema definition for the model.
  #
  # @return [SchemaDefinition] The unvalidated schema definition for the model.
  #
  # source://easy_talk_two//lib/easy_talk/model.rb#150
  def schema_definition; end
end

# source://easy_talk_two//lib/easy_talk/model.rb#50
module EasyTalk::Model::InstanceMethods
  # source://easy_talk_two//lib/easy_talk/model.rb#51
  def initialize(attributes = T.unsafe(nil)); end

  # Override as_json to include both defined and additional properties
  #
  # source://easy_talk_two//lib/easy_talk/model.rb#88
  def as_json(_options = T.unsafe(nil)); end

  # source://easy_talk_two//lib/easy_talk/model.rb#56
  def method_missing(method_name, *args); end

  # Add to_hash method to convert defined properties to hash
  #
  # source://easy_talk_two//lib/easy_talk/model.rb#79
  def to_hash; end

  private

  # @return [Boolean]
  #
  # source://easy_talk_two//lib/easy_talk/model.rb#72
  def respond_to_missing?(method_name, include_private = T.unsafe(nil)); end
end

# Property class for building a JSON schema property.
#
# source://easy_talk_two//lib/easy_talk/property.rb#28
class EasyTalk::Property
  # Initializes a new instance of the Property class.
  #
  # @raise [ArgumentError] If the property type is missing.
  #
  # source://easy_talk_two//lib/easy_talk/property.rb#59
  sig { params(name: ::Symbol, type: T.any(::Object, ::String), constraints: T::Hash[::Symbol, T.untyped]).void }
  def initialize(name, type = T.unsafe(nil), constraints = T.unsafe(nil)); end

  # Converts the object to a JSON representation.
  #
  # @param _args [Array] Optional arguments
  # @return [Hash] The JSON representation of the object
  #
  # source://easy_talk_two//lib/easy_talk/property.rb#94
  def as_json(*_args); end

  # Builds the property based on the specified type, constraints, and builder.
  #
  # If the type responds to the `schema` method, it returns the schema of the type.
  # Otherwise, it returns 'object'.
  #
  # If a builder is specified, it uses the builder to build the property.
  # The arguments passed to the builder depend on whether the builder is a collection type or not.
  #
  # @return [Object] The built property.
  #
  # source://easy_talk_two//lib/easy_talk/property.rb#75
  def build; end

  # Returns the builder associated with the property type.
  #
  # The builder is responsible for constructing the property based on its type.
  # It looks up the builder based on the type's class name or name.
  #
  # @return [Builder] The builder associated with the property type.
  #
  # source://easy_talk_two//lib/easy_talk/property.rb#104
  def builder; end

  # Returns the value of attribute constraints.
  #
  # source://easy_talk_two//lib/easy_talk/property.rb#30
  def constraints; end

  # Returns the value of attribute name.
  #
  # source://easy_talk_two//lib/easy_talk/property.rb#30
  def name; end

  # Returns the value of attribute type.
  #
  # source://easy_talk_two//lib/easy_talk/property.rb#30
  def type; end

  private

  # source://easy_talk_two//lib/easy_talk/property.rb#117
  def build_nilable_schema; end

  # @return [Boolean]
  #
  # source://easy_talk_two//lib/easy_talk/property.rb#110
  def nilable_type?; end
end

# source://easy_talk_two//lib/easy_talk/property.rb#32
EasyTalk::Property::TYPE_TO_BUILDER = T.let(T.unsafe(nil), Hash)

# = EasyTalk \SchemaDefinition
# SchemaDefinition provides the methods for defining a schema within the define_schema block.
# The @schema is a hash that contains the unvalidated schema definition for the model.
# A SchemaDefinition instanace is the passed to the Builder.build_schema method to validate and compile the schema.
#
# source://easy_talk_two//lib/easy_talk/schema_definition.rb#12
class EasyTalk::SchemaDefinition
  # @return [SchemaDefinition] a new instance of SchemaDefinition
  #
  # source://easy_talk_two//lib/easy_talk/schema_definition.rb#20
  def initialize(name, schema = T.unsafe(nil)); end

  # source://easy_talk_two//lib/easy_talk/schema_definition.rb#27
  def additional_items(*values); end

  # source://easy_talk_two//lib/easy_talk/schema_definition.rb#27
  def additional_properties(*values); end

  # source://easy_talk_two//lib/easy_talk/schema_definition.rb#32
  def compose(*subschemas); end

  # source://easy_talk_two//lib/easy_talk/schema_definition.rb#27
  def const(*values); end

  # source://easy_talk_two//lib/easy_talk/schema_definition.rb#27
  def content_encoding(*values); end

  # source://easy_talk_two//lib/easy_talk/schema_definition.rb#27
  def content_media_type(*values); end

  # source://easy_talk_two//lib/easy_talk/schema_definition.rb#27
  def default(*values); end

  # source://easy_talk_two//lib/easy_talk/schema_definition.rb#27
  def dependencies(*values); end

  # source://easy_talk_two//lib/easy_talk/schema_definition.rb#27
  def dependent_required(*values); end

  # source://easy_talk_two//lib/easy_talk/schema_definition.rb#27
  def description(*values); end

  # source://easy_talk_two//lib/easy_talk/schema_definition.rb#27
  def enum(*values); end

  # source://easy_talk_two//lib/easy_talk/schema_definition.rb#27
  def examples(*values); end

  # source://easy_talk_two//lib/easy_talk/schema_definition.rb#27
  def exclusive_maximum(*values); end

  # source://easy_talk_two//lib/easy_talk/schema_definition.rb#27
  def exclusive_minimum(*values); end

  # source://easy_talk_two//lib/easy_talk/schema_definition.rb#27
  def format(*values); end

  # source://easy_talk_two//lib/easy_talk/schema_definition.rb#27
  def items(*values); end

  # source://easy_talk_two//lib/easy_talk/schema_definition.rb#27
  def max_items(*values); end

  # source://easy_talk_two//lib/easy_talk/schema_definition.rb#27
  def max_length(*values); end

  # source://easy_talk_two//lib/easy_talk/schema_definition.rb#27
  def max_properties(*values); end

  # source://easy_talk_two//lib/easy_talk/schema_definition.rb#27
  def maximum(*values); end

  # source://easy_talk_two//lib/easy_talk/schema_definition.rb#27
  def min_items(*values); end

  # source://easy_talk_two//lib/easy_talk/schema_definition.rb#27
  def min_length(*values); end

  # source://easy_talk_two//lib/easy_talk/schema_definition.rb#27
  def min_properties(*values); end

  # source://easy_talk_two//lib/easy_talk/schema_definition.rb#27
  def minimum(*values); end

  # source://easy_talk_two//lib/easy_talk/schema_definition.rb#27
  def multiple_of(*values); end

  # Returns the value of attribute name.
  #
  # source://easy_talk_two//lib/easy_talk/schema_definition.rb#18
  def name; end

  # Helper method for nullable and optional properties
  #
  # source://easy_talk_two//lib/easy_talk/schema_definition.rb#63
  def nullable_optional_property(name, type, constraints = T.unsafe(nil), &blk); end

  # @return [Boolean]
  #
  # source://easy_talk_two//lib/easy_talk/schema_definition.rb#58
  def optional?; end

  # source://easy_talk_two//lib/easy_talk/schema_definition.rb#27
  def pattern(*values); end

  # source://easy_talk_two//lib/easy_talk/schema_definition.rb#27
  def pattern_properties(*values); end

  # source://easy_talk_two//lib/easy_talk/schema_definition.rb#40
  sig do
    params(
      name: T.any(::String, ::Symbol),
      type: T.untyped,
      constraints: T.untyped,
      blk: T.nilable(T.proc.void)
    ).void
  end
  def property(name, type, constraints = T.unsafe(nil), &blk); end

  # source://easy_talk_two//lib/easy_talk/schema_definition.rb#27
  def required(*values); end

  # Returns the value of attribute schema.
  #
  # source://easy_talk_two//lib/easy_talk/schema_definition.rb#18
  def schema; end

  # source://easy_talk_two//lib/easy_talk/schema_definition.rb#27
  def title(*values); end

  # source://easy_talk_two//lib/easy_talk/schema_definition.rb#27
  def type(*values); end

  # source://easy_talk_two//lib/easy_talk/schema_definition.rb#27
  def unique_items(*values); end

  # @raise [InvalidPropertyNameError]
  #
  # source://easy_talk_two//lib/easy_talk/schema_definition.rb#51
  def validate_property_name(name); end
end

# source://easy_talk_two//lib/easy_talk/tools/function_builder.rb#4
module EasyTalk::Tools; end

# FunctionBuilder is a module that builds a hash with the function type and function details.
# The return value is typically passed as argument to LLM function calling APIs.
#
# source://easy_talk_two//lib/easy_talk/tools/function_builder.rb#7
module EasyTalk::Tools::FunctionBuilder
  class << self
    # source://easy_talk_two//lib/easy_talk/tools/function_builder.rb#28
    def generate_function_description(model); end

    # source://easy_talk_two//lib/easy_talk/tools/function_builder.rb#24
    def generate_function_name(model); end

    # Creates a new function object based on the given model.
    #
    # @param model [Model] The EasyTalk model containing the function details.
    # @return [Hash] The function object.
    #
    # source://easy_talk_two//lib/easy_talk/tools/function_builder.rb#13
    def new(model); end
  end
end

# source://easy_talk_two//lib/easy_talk/types/base_composer.rb#4
module EasyTalk::Types; end

# no-doc
#
# source://easy_talk_two//lib/easy_talk/types/base_composer.rb#6
class EasyTalk::Types::BaseComposer
  extend T::Generic

  Elem = type_member

  # Initializes a new instance of the BaseComposer class.
  #
  # @param args [Array] the items to be assigned to the instance variable @items
  # @return [BaseComposer] a new instance of BaseComposer
  #
  # source://easy_talk_two//lib/easy_talk/types/base_composer.rb#18
  def initialize(*args); end

  # source://easy_talk_two//lib/easy_talk/types/base_composer.rb#13
  sig { returns(T::Array[Elem]) }
  def items; end
end

# Base class for composition types
#
# source://easy_talk_two//lib/easy_talk/types/composer.rb#8
class EasyTalk::Types::Composer < ::EasyTalk::Types::BaseComposer
  # Returns the name of the composition type.
  #
  # source://easy_talk_two//lib/easy_talk/types/composer.rb#15
  def name; end

  class << self
    # Returns the name of the composition type.
    #
    # @raise [NotImplementedError]
    #
    # source://easy_talk_two//lib/easy_talk/types/composer.rb#10
    def name; end
  end
end

# Represents a composition type that allows all of the specified types.
#
# source://easy_talk_two//lib/easy_talk/types/composer.rb#20
class EasyTalk::Types::Composer::AllOf < ::EasyTalk::Types::Composer
  # source://easy_talk_two//lib/easy_talk/types/composer.rb#25
  def name; end

  class << self
    # source://easy_talk_two//lib/easy_talk/types/composer.rb#21
    def name; end
  end
end

# Represents a composition type that allows any of the specified types.
#
# source://easy_talk_two//lib/easy_talk/types/composer.rb#31
class EasyTalk::Types::Composer::AnyOf < ::EasyTalk::Types::Composer
  # source://easy_talk_two//lib/easy_talk/types/composer.rb#36
  def name; end

  class << self
    # source://easy_talk_two//lib/easy_talk/types/composer.rb#32
    def name; end
  end
end

# Represents a composition type that allows one of the specified types.
#
# source://easy_talk_two//lib/easy_talk/types/composer.rb#42
class EasyTalk::Types::Composer::OneOf < ::EasyTalk::Types::Composer
  # source://easy_talk_two//lib/easy_talk/types/composer.rb#47
  def name; end

  class << self
    # source://easy_talk_two//lib/easy_talk/types/composer.rb#43
    def name; end
  end
end

# source://easy_talk_two//lib/easy_talk/errors.rb#6
class EasyTalk::UnknownOptionError < ::EasyTalk::Error; end

# source://easy_talk_two//lib/easy_talk/version.rb#4
EasyTalk::VERSION = T.let(T.unsafe(nil), String)

# This module provides additional functionality for working with Sorbet types.
#
# source://easy_talk_two//lib/easy_talk/sorbet_extension.rb#4
module SorbetExtension
  # Checks if the types in the collection include the NilClass type.
  #
  # @return [Boolean] true if the types include NilClass, false otherwise.
  #
  # source://easy_talk_two//lib/easy_talk/sorbet_extension.rb#8
  def nilable?; end
end

# source://easy_talk_two//lib/easy_talk/types/composer.rb#57
module T::AllOf
  class << self
    # Creates a new instance of `EasyTalk::Types::Composer::AllOf` with the given arguments.
    #
    # @param args [Array] the list of arguments to be passed to the constructor
    # @return [EasyTalk::Types::Composer::AllOf] a new instance
    #
    # source://easy_talk_two//lib/easy_talk/types/composer.rb#62
    def [](*args); end
  end
end

# Shorthand module for accessing the AnyOf composer
#
# source://easy_talk_two//lib/easy_talk/types/composer.rb#68
module T::AnyOf
  class << self
    # Creates a new instance of `EasyTalk::Types::Composer::AnyOf` with the given arguments.
    #
    # @param args [Array] the list of arguments to be passed to the constructor
    # @return [EasyTalk::Types::Composer::AnyOf] a new instance
    #
    # source://easy_talk_two//lib/easy_talk/types/composer.rb#73
    def [](*args); end
  end
end

class T::InexactStruct
  include ::T::Props
  include ::T::Props::Plugin
  include ::T::Props::Optional
  include ::T::Props::PrettyPrintable
  include ::T::Props::Serializable
  include ::T::Props::WeakConstructor
  include ::T::Props::Constructor
  extend ::T::Props::ClassMethods
  extend ::T::Props::Plugin::ClassMethods
  extend ::T::Props::Serializable::ClassMethods
end

# Shorthand module for accessing the OneOf composer
#
# source://easy_talk_two//lib/easy_talk/types/composer.rb#79
module T::OneOf
  class << self
    # Creates a new instance of `EasyTalk::Types::Composer::OneOf` with the given arguments.
    #
    # @param args [Array] the list of arguments to be passed to the constructor
    # @return [EasyTalk::Types::Composer::OneOf] a new instance
    #
    # source://easy_talk_two//lib/easy_talk/types/composer.rb#84
    def [](*args); end
  end
end

class T::Types::Union < ::T::Types::Base
  include ::SorbetExtension
end
